{"version":3,"file":"modal-ref.js","sourceRoot":"","sources":["../../src/modal/modal-ref.ts"],"names":[],"mappings":"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","sourcesContent":["import {Injectable, ComponentRef} from '@angular/core';\n\nimport {NgbModalBackdrop} from './modal-backdrop';\nimport {NgbModalWindow} from './modal-window';\n\nimport {ContentRef} from '../util/popup';\n\n/**\n * A reference to an active (currently opened) modal. Instances of this class\n * can be injected into components passed as modal content.\n */\n@Injectable()\nexport class NgbActiveModal {\n  /**\n   * Can be used to close a modal, passing an optional result.\n   */\n  close(result?: any): void {}\n\n  /**\n   * Can be used to dismiss a modal, passing an optional reason.\n   */\n  dismiss(reason?: any): void {}\n}\n\n/**\n * A reference to a newly opened modal.\n */\n@Injectable()\nexport class NgbModalRef {\n  private _resolve: (result?: any) => void;\n  private _reject: (reason?: any) => void;\n\n  /**\n   * The instance of component used as modal's content.\n   * Undefined when a TemplateRef is used as modal's content.\n   */\n  get componentInstance(): any {\n    if (this._contentRef.componentRef) {\n      return this._contentRef.componentRef.instance;\n    }\n  }\n\n  // only needed to keep TS1.8 compatibility\n  set componentInstance(instance: any) {}\n\n  /**\n   * A promise that is resolved when a modal is closed and rejected when a modal is dismissed.\n   */\n  result: Promise<any>;\n\n  constructor(\n      private _windowCmptRef: ComponentRef<NgbModalWindow>, private _contentRef: ContentRef,\n      private _backdropCmptRef?: ComponentRef<NgbModalBackdrop>, private _beforeDismiss?: Function) {\n    _windowCmptRef.instance.dismissEvent.subscribe((reason: any) => { this.dismiss(reason); });\n\n    this.result = new Promise((resolve, reject) => {\n      this._resolve = resolve;\n      this._reject = reject;\n    });\n    this.result.then(null, () => {});\n  }\n\n  /**\n   * Can be used to close a modal, passing an optional result.\n   */\n  close(result?: any): void {\n    if (this._windowCmptRef) {\n      this._resolve(result);\n      this._removeModalElements();\n    }\n  }\n\n  /**\n   * Can be used to dismiss a modal, passing an optional reason.\n   */\n  dismiss(reason?: any): void {\n    if (this._windowCmptRef) {\n      if (!this._beforeDismiss || this._beforeDismiss() !== false) {\n        this._reject(reason);\n        this._removeModalElements();\n      }\n    }\n  }\n\n  private _removeModalElements() {\n    const windowNativeEl = this._windowCmptRef.location.nativeElement;\n    windowNativeEl.classList.remove('fadeIn');\n    windowNativeEl.classList.add('fadeOut');\n\n    setTimeout(() => {\n      if (windowNativeEl && windowNativeEl.parentNode) {\n        windowNativeEl.parentNode.removeChild(windowNativeEl);\n      }\n      if (this._windowCmptRef && this._windowCmptRef.destroy) {\n        this._windowCmptRef.destroy();\n      }\n      this._windowCmptRef = null;\n    }, 500);\n\n    if (this._backdropCmptRef) {\n      const backdropNativeEl = this._backdropCmptRef.location.nativeElement;\n      backdropNativeEl.classList.remove('fadeIn');\n      backdropNativeEl.classList.add('fadeOut');\n      setTimeout(() => {\n        if (backdropNativeEl && backdropNativeEl.parentNode) {\n          backdropNativeEl.parentNode.removeChild(backdropNativeEl);\n        }\n        if (this._backdropCmptRef && this._backdropCmptRef.destroy) {\n          this._backdropCmptRef.destroy();\n        }\n        this._backdropCmptRef = null;\n      }, 800);\n    }\n\n    if (this._contentRef && this._contentRef.viewRef) {\n      this._contentRef.viewRef.destroy();\n    }\n\n    this._contentRef = null;\n  }\n}\n"]}